---
import Settings from "@/components/Settings.astro";
import History from "@/components/History.astro"; // Added import
import { Icon } from "astro-icon/components";
---

<nav class="sticky bg-base p-2 flex items-center space-x-2 z-[9999]">
  <h1 class="mr-auto">bromine</h1>

  <div class="flex items-center justify-center flex-1 space-x-2">
    <button
      aria-label="Back"
      id="omnibar-back-btn"
      class="shadow-md bg-surface p-1.5 rounded-md hover:bg-highlight-med"
    >
      <Icon name="ph:arrow-left-bold" class="size-4.5" />
    </button>

    <button
      aria-label="Forward"
      id="omnibar-forward-btn"
      class="shadow-md bg-surface p-1.5 rounded-md hover:bg-highlight-med"
    >
      <Icon name="ph:arrow-right-bold" class="size-4.5" />
    </button>

    <button
      aria-label="Reload"
      id="omnibar-reload-btn"
      class="shadow-md bg-surface p-1.5 rounded-md hover:bg-highlight-med"
    >
      <Icon name="ph:arrow-clockwise-bold" class="size-4.5" />
    </button>

    <div
      class="shadow-md dark:bg-surface flex items-center rounded-md px-3 py-1.5"
    >
      <Icon name="ph:magnifying-glass-bold" class="size-4.5 mr-2" />
      <form id="form" class="flex-center w-md">
        <input
          spellcheck="false"
          autocomplete="off"
          id="address"
          type="text"
          placeholder="Search the web freely"
          class="bg-transparent w-full focus:outline-none"
        />
      </form>
    </div>

    <History />

    <button
      aria-label="Dev Tools"
      id="omnibar-dev-btn"
      class="shadow-md bg-surface p-1.5 rounded-md hover:bg-highlight-med"
    >
      <Icon name="ph:code-bold" class="size-4.5" />
    </button>

    <Settings />
  </div>
</nav>

<script is:inline defer async>
  const backButton = document.getElementById("omnibar-back-btn");
  const forwardButton = document.getElementById("omnibar-forward-btn");
  const reloadButton = document.getElementById("omnibar-reload-btn");
  const devButton = document.getElementById("omnibar-dev-btn");

  backButton.addEventListener("click", () => {
    const iframe = document.getElementById("frame");
    if (iframe && iframe.contentWindow) iframe.contentWindow.history.back();
  });

  forwardButton.addEventListener("click", () => {
    const iframe = document.getElementById("frame");
    if (iframe && iframe.contentWindow) iframe.contentWindow.history.forward();
  });

  reloadButton.addEventListener("click", () => {
    const iframe = document.getElementById("frame");
    if (iframe && iframe.contentWindow) iframe.contentWindow.location.reload();
  });

let isErudaVisible = false;

devButton.addEventListener("click", () => {
  const iframe = document.getElementById("frame");

  // Exit early if iframe or its contentWindow are not accessible
  if (!iframe?.contentWindow) return;

  const { contentWindow: iframeWin } = iframe;
  const iframeDoc = iframeWin.document;

  if (iframeWin.eruda) {
    // Eruda is loaded, toggle its visibility and update state
    isErudaVisible ? iframeWin.eruda.hide() : iframeWin.eruda.show();
    isErudaVisible = !isErudaVisible;
  } else {
    // Eruda is not loaded, inject the script
    const script = iframeDoc.createElement("script");
    script.src = "https://cdn.jsdelivr.net/npm/eruda";
    script.onload = () => {
      // Initialize and show Eruda after the script loads
      // Assuming eruda is guaranteed to be available on iframeWin after onload
      iframeWin.eruda.init({ tool: ["console", "elements", "sources"] });
      iframeWin.eruda.show();
      isErudaVisible = true; // Set initial state to true after first load
    };
    iframeDoc.head.appendChild(script);
  }
});


//
  // let isErudaVisible = false;
  //
  // devButton.addEventListener("click", () => {
  //   const iframe = document.getElementById("frame");
  //   if (iframe && iframe.contentWindow) {
  //     const iframeDoc = iframe.contentWindow.document;
  //
  //     if (iframe.contentWindow.eruda) {
  //       if (isErudaVisible) {
  //         iframe.contentWindow.eruda.hide(); // Call Eruda's hide method
  //         isErudaVisible = false; // Update our state
  //       } else {
  //         iframe.contentWindow.eruda.show(); 
  //         isErudaVisible = true;
  //       }
  //     } else {
  //       // If Eruda is not loaded, inject the script
  //       const script = iframeDoc.createElement("script");
  //       script.src = "https://cdn.jsdelivr.net/npm/eruda";
  //       script.onload = () => {
  //         // Ensure Eruda is initialized and shown after loading
  //         if (iframe.contentWindow.eruda) {
  //           iframe.contentWindow.eruda.init({ tool: ["console", "elements", "sources"] });
  //           iframe.contentWindow.eruda.show(); // Show Eruda on first load
  //           isErudaVisible = true; // Set initial state to true
  //         }
  //       };
  //       // Append the script to the head of the iframe's document
  //       iframeDoc.head.appendChild(script);
  //     }
  //   }
  // });
</script>
