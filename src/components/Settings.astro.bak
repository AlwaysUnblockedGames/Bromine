---
import { Icon } from 'astro-icon/components';
import settingsData from '@data/settings.json';
import pingURL from "@utils/ping.ts";

const flatSettingsConfig = settingsData.sections.flatMap(section => section.settings);
---
<div id="settings-popup" class="fixed inset-0 flex items-center justify-center bg-base/80 backdrop-blur-sm hidden z-[10000]">
  <div class="bg-surface w-[90vw] max-w-[500px] rounded-lg shadow-xl p-6 m-4 max-h-[80vh] overflow-y-auto transform translate-y-[-50px] opacity-0 transition-all duration-300 ease-in-out">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-semibold text-text">Settings</h1>
      <button id="close-settings-btn" aria-label="Close settings" class="text-text hover:text-iris transition-colors">
        <Icon name="lucide:x" class="size-6" />
      </button>
    </div>

    <div class="space-y-6">
      {settingsData.sections.map(section => (
        <section class="space-y-4 border-t border-overlay pt-4 first:pt-0 first:border-t-0">
          <h2 class="text-lg font-medium text-text">{section.title}</h2>
          {section.settings.map(setting => (
            <div class="flex items-center justify-between gap-4">
              <div class="flex items-center gap-2">
                <label class="text-text" for={setting.id}>{setting.label}</label>
                {setting.description && (
                  <button
                    class="info-btn text-text/60 hover:text-iris transition-colors"
                    aria-label={`More info about ${setting.label}`}
                    data-description={setting.description}
                  >
                    <Icon name="lucide:info" class="size-4" />
                  </button>
                )}
              </div>
              {setting.type === 'select' && (
                <select id={setting.id} class="bg-base text-text rounded-md p-1 border border-overlay focus:border-iris">
                  {setting.options?.map(option => (
                    <option value={option.value}>{option.label}</option>
                  ))}
                </select>
              )}
              {setting.type === 'text' && (
                <input
                  type="text"
                  id={setting.id}
                  class="bg-base text-text rounded-md border p-1 border-overlay focus:border-iris"
                  placeholder={setting.placeholder || ''}
                />
              )}
            </div>
          ))}
        </section>
      ))}

    </div>

    <div id="info-tooltip" class="bg-overlay absolute z-10 hidden max-w-xs p-2 text-sm rounded-md shadow-lg bg-crust text-text border border-overlay">
    </div>

  </div>
</div>

<script define:vars={{ settingsConfig: flatSettingsConfig }} is:inline defer>
  const closeButton = document.getElementById('close-settings-btn');
  const popup = document.getElementById('settings-popup');
  const tooltip = document.getElementById('info-tooltip');

  // --- Generic Settings Functions ---
  function loadSettings() {
    settingsConfig.forEach(setting => {
      const element = document.getElementById(setting.id);
      if (!element) return;
      const storedValue = localStorage.getItem(setting.id);
      const valueToApply = storedValue !== null ? storedValue : setting.defaultValue;
      if (setting.type === 'checkbox') {
        element.checked = valueToApply === 'true';
      } else {
        element.value = valueToApply;
      }
    });
  }

  function saveSettings() {
    settingsConfig.forEach(setting => {
      const element = document.getElementById(setting.id);
      if (!element) return;
      const valueToStore = setting.type === 'checkbox' ? element.checked : element.value;
      localStorage.setItem(setting.id, valueToStore);
    });
    location.reload();
  }

  function initializeSettings() {
    loadSettings();
    settingsConfig.forEach(setting => {
      const element = document.getElementById(setting.id);
      if (element) {
        element.addEventListener('change', saveSettings);
        if (setting.type === 'text') {
            element.addEventListener('blur', saveSettings);
        }
      }
    });
  }

  // --- Tooltip Functions ---
  function showTooltip(button) {
    const description = button.dataset.description;
    if (!description || !tooltip) return;

    tooltip.textContent = description;
    tooltip.classList.remove('hidden');

    const buttonRect = button.getBoundingClientRect();
    const popupContentRect = popup.firstElementChild.getBoundingClientRect();
    const tooltipRect = tooltip.getBoundingClientRect();

    // --- VERTICAL POSITIONING ---
    let top = buttonRect.top - popupContentRect.top - tooltipRect.height - 8;

    if (top < 0) {
      top = buttonRect.bottom - popupContentRect.top + 8;
    }

    // --- HORIZONTAL POSITIONING ---
    const left = (popupContentRect.width - tooltipRect.width) / 2;

    tooltip.style.top = `${top}px`;
    tooltip.style.left = `${left}px`;
  }

  function hideTooltip() {
    if (tooltip && !tooltip.classList.contains('hidden')) {
      tooltip.classList.add('hidden');
    }
  }

  // --- Event Listeners ---
  function addEventListeners() {
    closeButton?.addEventListener('click', () => {
      popup.classList.remove('transform', 'translate-y-0', 'opacity-100');
      popup.classList.add('translate-y-[-50px]', 'opacity-0');
      setTimeout(() => popup.classList.add('hidden'), 300);
      hideTooltip();
    });

    document.querySelectorAll('.info-btn').forEach(button => {
      button.addEventListener('mouseenter', () => showTooltip(button));
      button.addEventListener('mouseleave', hideTooltip);
      button.addEventListener('focus', () => showTooltip(button));
      button.addEventListener('blur', hideTooltip);
    });

    window.addEventListener('keydown', (event) => {
      if (event.key === 'Escape') {
        if (popup && !popup.classList.contains('hidden')) {
          event.preventDefault();
          closeButton.click();
        }
      }
    });

    popup.firstElementChild.addEventListener('scroll', hideTooltip, { passive: true });
  }

  // --- Initialize ---
  initializeSettings();
  addEventListeners();
</script>

<style>
  #settings-popup.hidden .transform { transform: translateY(-50px); opacity: 0; }
  #settings-popup:not(.hidden) .transform { transform: translateY(0); opacity: 1; }
  .overflow-y-auto::-webkit-scrollbar { width: 8px; }
  .overflow-y-auto::-webkit-scrollbar-track { background: transparent; }
  .overflow-y-auto::-webkit-scrollbar-thumb { background: #6B7280; border-radius: 4px; }
  .overflow-y-auto::-webkit-scrollbar-thumb:hover { background: #9CA3AF; }

  #info-tooltip {
    /* pointer-events: none; */
    transition: opacity 0.15s ease-in-out;
  }
</style>
