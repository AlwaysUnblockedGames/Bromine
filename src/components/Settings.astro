---
import { Icon } from 'astro-icon/components';
import settingsData from '@data/settings.json';

const flatSettingsConfig = settingsData.sections.flatMap(section => section.settings);
---
<!-- The `invisible` and `pointer-events-none` classes keep the popup hidden but available for transitions -->
<div id="settings-popup" class="fixed inset-0 flex items-center justify-center bg-base/80 backdrop-blur-sm z-[10000] invisible pointer-events-none opacity-0 transition-opacity duration-300 ease-in-out">
  <!-- This inner div handles the transform transition -->
  <div id="settings-popup-content" class="relative bg-surface w-[90vw] max-w-[500px] rounded-lg shadow-xl p-6 m-4 max-h-[80vh] overflow-y-auto transform translate-y-[-50px] transition-transform duration-300 ease-in-out">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-semibold text-text">Settings</h1>
      <button id="close-settings-btn" aria-label="Close settings" class="text-text hover:text-iris transition-colors">
        <Icon name="lucide:x" class="size-6" />
      </button>
    </div>

    <div class="space-y-6">
      <p>These settings will not apply until you reload the page!</p>
      {settingsData.sections.map(section => (
        <section class="space-y-4 border-t border-overlay pt-4 first:pt-0 first:border-t-0">
          <h2 class="text-lg font-medium text-text">{section.title}</h2>
          {section.settings.map(setting => (
            <div class="flex items-center justify-between gap-4">
              <div class="flex items-center gap-2">
                <label class="text-text" for={setting.id}>{setting.label}</label>
                {setting.description && (
                  <button
                    class="info-btn text-text/60 hover:text-iris transition-colors"
                    aria-label={`More info about ${setting.label}`}
                    data-description={setting.description}
                  >
                    <Icon name="lucide:info" class="size-4" />
                  </button>
                )}
              </div>
              <div class="flex items-center">
                {setting.type === 'select' && (
                  <select id={setting.id} class="bg-base text-text rounded-md p-1 border border-overlay focus:border-iris focus:outline-none">
                    {setting.options?.map(option => (
                      <option value={option.value}>{option.label}</option>
                    ))}
                  </select>
                )}
                {setting.type === 'text' && (
                  <input
                    type="text"
                    id={setting.id}
                    class="bg-base text-text rounded-md border p-1 border-overlay focus:border-iris focus:outline-none w-48"
                    placeholder={setting.placeholder || ''}
                  />
                )}
                {setting.type === 'toggle' && (
                    <label class="relative inline-flex items-center cursor-pointer">
                        <input type="checkbox" id={setting.id} class="sr-only peer" />
                        <div class="w-11 h-6 bg-overlay rounded-full peer peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-iris peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-iris"></div>
                    </label>
                )}
              </div>
            </div>
          ))}
        </section>
      ))}
      <div class="border-t border-overlay pt-4">
         <p class="text-xs text-text">Ping: <span id="ping-result" class="font-mono">Pinging...</span></p>
      </div>
    </div>

    <div id="info-tooltip" class="bg-overlay absolute z-10 hidden max-w-xs p-2 text-sm rounded-md shadow-lg bg-crust text-text border border-overlay pointer-events-none">
    </div>
  </div>
</div>

<script define:vars={{ settingsConfig: flatSettingsConfig }} is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const closeButton = document.getElementById('close-settings-btn');
    const popup = document.getElementById('settings-popup');
    const popupContent = document.getElementById('settings-popup-content');
    const tooltip = document.getElementById('info-tooltip');

    if (!popup || !popupContent) return;

    function closePopup() {
      popup.classList.remove('opacity-100');
      popupContent.classList.remove('translate-y-0');
      setTimeout(() => {
        popup.classList.add('invisible', 'pointer-events-none');
        hideTooltip();
      }, 300);
    }

    function loadSettings() {
      settingsConfig.forEach(setting => {
        const element = document.getElementById(setting.id);
        if (!element) return;
        const storedValue = localStorage.getItem(setting.id);
        const valueToApply = storedValue !== null ? storedValue : setting.defaultValue;
        if (setting.type === 'toggle') {
          element.checked = valueToApply === 'true';
        } else {
          element.value = valueToApply;
        }
      });
    }

    function saveSettings(event) {
      const element = event.target;
      const setting = settingsConfig.find(s => s.id === element.id);
      if (!setting) return;
      const valueToStore = setting.type === 'toggle' ? element.checked : element.value;
      localStorage.setItem(setting.id, valueToStore.toString());
    }

    function initializeSettings() {
      loadSettings();
      settingsConfig.forEach(setting => {
        const element = document.getElementById(setting.id);
        if (element) {
          element.addEventListener('change', saveSettings);
        }
      });
    }

    // --- Tooltip Functions ---
    function showTooltip(button) {
      const description = button.dataset.description;
      if (!description || !tooltip) return;

      tooltip.textContent = description;
      tooltip.classList.remove('hidden');

      // --- POSITIONING LOGIC ---
      const buttonRect = button.getBoundingClientRect();
      const contentRect = popupContent.getBoundingClientRect();

      tooltip.style.left = '50%';
      tooltip.style.transform = 'translateX(-50%)';

      let top = (buttonRect.top - contentRect.top) + button.offsetHeight + 8;

      if (top + tooltip.offsetHeight > popupContent.clientHeight) {
        top = (buttonRect.top - contentRect.top) - tooltip.offsetHeight - 8;
      }

      tooltip.style.top = `${top + popupContent.scrollTop}px`;
    }

    function hideTooltip() {
      if (tooltip && !tooltip.classList.contains('hidden')) {
        tooltip.classList.add('hidden');
      }
    }

    function addEventListeners() {
      closeButton?.addEventListener('click', closePopup);
      document.querySelectorAll('.info-btn').forEach(button => {
        button.addEventListener('mouseenter', () => showTooltip(button));
        button.addEventListener('mouseleave', hideTooltip);
        button.addEventListener('focus', () => showTooltip(button));
        button.addEventListener('blur', hideTooltip);
      });
      window.addEventListener('keydown', (event) => {
        if (event.key === 'Escape' && !popup.classList.contains('invisible')) {
          event.preventDefault();
          closePopup();
        }
      });
      popup.addEventListener('click', (event) => {
        if (event.target === popup) {
          closePopup();
        }
      });
      popupContent.addEventListener('scroll', hideTooltip, { passive: true });
    }

    initializeSettings();
    addEventListeners();
  });
</script>

<style>
  .overflow-y-auto::-webkit-scrollbar { width: 8px; }
  .overflow-y-auto::-webkit-scrollbar-track { background: transparent; }
  .overflow-y-auto::-webkit-scrollbar-thumb { background: #6B7280; border-radius: 4px; }
  .overflow-y-auto::-webkit-scrollbar-thumb:hover { background: #9CA3AF; }
</style>
