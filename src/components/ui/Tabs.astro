---
import { Icon } from "astro-icon/components";
---

<div class="sticky top-0 bg-black z-[60] h-8 pt-4"></div>
<div id="tabs-container" class="sticky top-6 z-[55] flex p-2 space-x-1 overflow-x-auto scrollbar-hide whitespace-nowrap">
  <div id="tab-container" class="flex space-x-1 scrollbar-hide overflow-x-auto">
  </div>
  <button id="new-tab-btn" class="min-w-8 h-8 flex items-center justify-center rounded-full bg-[#0b1528] border border-gold/30 text-gold hover:bg-gold/10 active:scale-95 transition-transform">
    <Icon name="ph:plus-bold" class="size-4" />
  </button>
</div>

<script>
  import { newTab, switchTab, closeTab } from "@/utils/lethal";

  const tabContainer = document.getElementById("tab-container");
  const newTabBtn = document.getElementById("new-tab-btn");
  let tabs = [];
  let isCheckingState = false; // To prevent re-entrant calls

  const getIcon = (url) =>
    /^https?:\/\/[\w.-]+\.[a-z]{2,}/i.test(url)
      ? `https://t1.gstatic.com/faviconV2?client=SOCIAL&type=FAVICON&fallback_opts=TYPE,URL&size=64&url=${url}`
      : "favicon.svg";

  function createTab(id, title = "New Tab", url = "") {
    if (tabs.some(t => t.id === id)) {
      console.warn(`Tab with id ${id} already exists.`);
      return;
    }

    const tab = document.createElement("div");
    tab.className = "tab relative flex items-center space-x-1 px-3 py-1.5 bg-[#0b1528] border border-gold/30 rounded-full min-w-[120px] max-w-[180px] cursor-pointer hover:bg-gold/10 transition-colors group";
    tab.dataset.tabId = id;

    const favicon = document.createElement("img");
    favicon.className = "tab-favicon size-4 rounded-full";
    favicon.src = getIcon(url);
    tab.appendChild(favicon);

    const titleElement = document.createElement("div");
    titleElement.className = "tab-title flex-1 text-sm text-text truncate";
    titleElement.textContent = title;
    tab.appendChild(titleElement);

    const closeBtn = document.createElement("button");
    closeBtn.className = "tab-close size-4 flex items-center justify-center rounded-full hover:bg-overlay/50 text-gold opacity-0 group-hover:opacity-100 transition-opacity";
    closeBtn.innerHTML = `<svg class="size-3" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M18 6L6 18M6 6l12 12"/></svg>`;
    closeBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      closeTab(id);
    });
    tab.appendChild(closeBtn);

    tab.addEventListener("click", () => {
      switchTab(id);
    });

    tabContainer?.appendChild(tab);
    tabs.push({ id, element: tab, title, url });

    return tab;
  }

  function updateActiveTab(activeId) {
    tabs.forEach(({ id, element }) => {
      const isActive = id === activeId;
      element.classList.toggle("bg-gold/20", isActive);
      element.classList.toggle("border-gold/60", isActive);
      element.classList.toggle("bg-[#0b1528]", !isActive);
      element.classList.toggle("border-gold/30", !isActive);
    });
  }

  function checkState() {
    if (isCheckingState) return;
    isCheckingState = true;

    const frames = [...document.querySelectorAll('iframe[id^="frame-"]')];
    const frameIds = frames.map((f) => parseInt(f.id.replace("frame-", ""), 10));

    tabs = tabs.filter(({ id, element }) => {
      if (!frameIds.includes(id)) {
        element.remove();
        return false;
      }
      return true;
    });

    frameIds.forEach((id) => {
      if (!tabs.some((t) => t.id === id)) createTab(id);
    });

    const visible = frames.find((f) => !f.classList.contains("hidden"));
    if (visible) {
      const activeId = parseInt(visible.id.replace("frame-", ""), 10);
      updateActiveTab(activeId);
    }

    isCheckingState = false;
  }

  newTabBtn?.addEventListener("click", () => {
    newTab();
  });

  document.addEventListener("new-tab", (e) => {
    if (!tabs.some((t) => t.id === e.detail.tabNumber)) {
      createTab(e.detail.tabNumber);
    }
    checkState();
  });

  document.addEventListener("switch-tab", (e) => {
    updateActiveTab(e.detail.tabNumber);
  });

  document.addEventListener("url-changed", (e) => {
    const tab = tabs.find((t) => t.id === e.detail.tabId);
    if (!tab) return;

    tab.title = e.detail.title || "New Tab";
    tab.url = e.detail.url || "";

    tab.element.querySelector(".tab-title").textContent = tab.title;
    tab.element.querySelector(".tab-favicon").src = getIcon(tab.url);
  });

  document.addEventListener("close-tab", (e) => {
    const idx = tabs.findIndex((t) => t.id === e.detail.tabNumber);
    if (idx === -1) return;

    tabs[idx].element.remove();
    tabs.splice(idx, 1);
    checkState();
  });

  checkState();
</script>

<style>
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }

  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
</style>
