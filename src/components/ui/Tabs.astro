---
import { Icon } from "astro-icon/components"
---

<div class="flex items-center bg-surface border-b border-overlay">
  <div id="tabs" class="flex-1 flex overflow-x-auto scrollbar-hide"></div>
  <button
    id="new-tab-btn"
    class="mr-2 p-2 text-text hover:bg-overlay rounded-md"
    aria-label="New Tab"
    title="New Tab"
  >
    <Icon name="ph:plus-bold" class="size-5" />
  </button>
</div>

<script is:inline async defer>
  let tabs = []
  const tabsDiv = document.getElementById("tabs")

  function createTab(id, title = "New Tab", url = "") {
    const tab = document.createElement("div")
    tab.className =
      "flex items-center min-w-0 max-w-xs px-4 py-2 border-r border-overlay hover:bg-overlay cursor-pointer"
    tab.dataset.tabId = id

    const favicon = document.createElement("img")
    favicon.className = "mr-2 size-4"
    favicon.alt = "Favicon"
    favicon.src = getIcon(url)

    const titleSpan = document.createElement("span")
    titleSpan.className = "tab truncate flex-1"
    titleSpan.textContent = title

    const close = document.createElement("button")
    close.className = "ml-2 text-text/50 hover:text-text"
    close.innerHTML = "&times;"
    close.onclick = async (e) => {
      e.stopPropagation()
      if (window.closeTab) {
        window.closeTab(id)
      }
    }

    tab.appendChild(favicon)
    tab.appendChild(titleSpan)
    tab.appendChild(close)

    tab.onclick = () => {
      if (window.switchTab) {
        window.switchTab(id)
      }
    }

    tabsDiv.appendChild(tab)
    const tabData = { id, element: tab, title, url }
    tabs.push(tabData)

    return tabData
  }

  function getIcon(url) {
    if (!url)
      return 'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"><text x="0" y="14" font-size="16">üåê</text></svg>'

    return `https://t1.gstatic.com/faviconV2?client=SOCIAL&type=FAVICON&fallback_opts=TYPE,SIZE,URL&size=64&url=${url}`
  }

  function checkState() {
    const frames = Array.from(document.querySelectorAll('iframe[id^="frame-"]'))
    const frameIds = frames.map((frame) =>
      parseInt(frame.id.replace("frame-", "")),
    )

    tabs = tabs.filter((tab) => {
      if (!frameIds.includes(tab.id)) {
        tab.element.remove()
        return false
      }
      return true
    })

    frameIds.forEach((id) => {
      if (!tabs.some((tab) => tab.id === id)) {
        createTab(id, "New Tab", "")
      }
    })

    const visibleFrame = frames.find(
      (frame) => !frame.classList.contains("hidden"),
    )
    if (visibleFrame) {
      const activeTabId = parseInt(currentFrame.id.replace("frame-", ""))
      syncUI(activeTabId)
    }
  }

  function syncUI(activeId) {
    document.querySelectorAll("[data-tab-id]").forEach((tab) => {
      const isActive = parseInt(tab.dataset.tabId) === activeId
      tab.classList.toggle("bg-overlay", isActive)
      tab.classList.toggle("active", isActive)
    })
  }

  function renameTab(tabId, title, url) {
    const tabData = tabs.find((t) => t.id === tabId)
    if (!tabData) return

    tabData.title = title || "New Tab"
    tabData.url = url || ""

    tabData.element.querySelector(".tab").textContent = tabData.title

    tabData.element.querySelector("img").src = getIcon(tabData.url)
  }

  // --- EVENTS ----
  document.getElementById("new-tab-btn")?.addEventListener("click", () => {
    if (window.newTab) window.newTab()
  })

  document.addEventListener("new-tab", (e) => {
    const tabId = e.detail.tabNumber
    if (!tabs.some((tab) => tab.id === tabId)) {
      createTab(tabId, "New Tab", "")
    }
    checkState()
  })

  document.addEventListener("switch-tab", (e) => {
    const tabId = e.detail.tabNumber
    syncUI(tabId)
  })

  document.addEventListener("close-tab", (e) => {
    const tabId = e.detail.tabNumber
    const tabIndex = tabs.findIndex((tab) => tab.id === tabId)
    if (tabIndex !== -1) {
      tabs[tabIndex].element.remove()
      tabs.splice(tabIndex, 1)
    }
    checkState()
  })

  document.addEventListener("url-changed", (e) => {
    renameTab(e.detail.tabId, e.detail.title, e.detail.url)
  })

  checkState()
</script>

<style>
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
  
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  
  [data-tab-id] {
    border-bottom: 2px solid transparent;
    transition: all 0.2s ease;
  }
  
  [data-tab-id]:hover, [data-tab-id].active {
    background-color: var(--color-overlay);
  }
  
  [data-tab-id].active {
    border-bottom-color: var(--color-iris);
  }

  .sortable-ghost {
    opacity: 0.5;
    background: var(--color-highlight-med);
  }
</style>
