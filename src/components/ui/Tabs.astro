---
import { Icon } from "astro-icon/components"
---

<div class="flex items-center bg-surface border-b border-overlay">
  <div id="tabs" class="flex-1 flex overflow-x-auto scrollbar-hide"></div>
  <button
    id="new-tab-btn"
    class="mr-2 p-2 text-text hover:bg-overlay rounded-md"
    aria-label="New Tab"
    title="New Tab"
  >
    <Icon name="ph:plus-bold" class="size-5" />
  </button>
</div>

<script defer>
  let tabs = [];
  let currentTabId = 1;
  const tabsContainer = document.getElementById('tabs');
  
  function createTab(id, title = 'New Tab') {
    const tab = document.createElement('div');
    tab.className = 'flex items-center min-w-0 max-w-xs px-4 py-2 border-r border-overlay hover:bg-overlay cursor-pointer';
    tab.dataset.tabId = id;
    
    const favicon = document.createElement('span');
    favicon.className = 'mr-2 text-sm';
    favicon.textContent = '🌐';
    
    const titleSpan = document.createElement('span');
    titleSpan.className = 'truncate flex-1';
    titleSpan.textContent = title;
    
    const close = document.createElement('button');
    close.className = 'ml-2 text-text/50 hover:text-text';
    close.innerHTML = '&times;';
    close.onclick = async (e) => {
      e.stopPropagation();
      if (window.closeTab) {
        window.closeTab(id);
      }
    };
    
    tab.appendChild(favicon);
    tab.appendChild(titleSpan);
    tab.appendChild(close);
    
    tab.onclick = () => {
      if (window.switchTab) {
        window.switchTab(id);
      }
    };
    
    tabsContainer.appendChild(tab);
    const tabData = { id, element: tab, title };
    tabs.push(tabData);
    
    return tabData;
  }
  
  function checkState() {
    const frames = Array.from(document.querySelectorAll('iframe[id^="frame-"]'));
    const frameIds = frames.map(frame => parseInt(frame.id.replace('frame-', '')));
    
    tabs = tabs.filter(tab => {
      if (!frameIds.includes(tab.id)) {
        tab.element.remove();
        return false;
      }
      return true;
    });
    
    frameIds.forEach(id => {
      if (!tabs.some(tab => tab.id === id)) {
        createTab(id, 'New Tab');
      }
    });
    
    const visibleFrame = frames.find(frame => !frame.classList.contains('hidden'));
    if (visibleFrame) {
      const activeTabId = parseInt(visibleFrame.id.replace('frame-', ''));
      currentTabId = activeTabId;
      syncWithNewStateIDKwhattoputhere(activeTabId);
    }
  }
  
  function syncWithNewStateIDKwhattoputhere(activeId) {
    document.querySelectorAll('[data-tab-id]').forEach(tab => {
      const isActive = parseInt(tab.dataset.tabId) === activeId;
      tab.classList.toggle('bg-overlay', isActive);
    });
  }
  
  function changeTitle(tabId, title, url) {
    const tab = tabs.find(t => t.id === tabId);
    if (!tab) return;
    
    tab.title = title || 'New Tab';
    tab.url = url || '';
    
    const titleSpan = tab.element.querySelector('span:not([class*="icon"])');
    if (titleSpan) {
      titleSpan.textContent = tab.title;
    }
  }
  
  document.addEventListener('DOMContentLoaded', () => {
    checkState();
    
    document.getElementById('new-tab-btn')?.addEventListener('click', () => {
      if (window.newTab) window.newTab();
    });
    
    document.addEventListener('new-tab', (e) => {
      const tabId = e.detail.tabNumber;
      if (!tabs.some(tab => tab.id === tabId)) {
        createTab(tabId, 'New Tab');
      }
      checkState();
    });
    
    document.addEventListener('switch-tab', (e) => {
      const tabId = e.detail.tabNumber;
      currentTabId = tabId;
      syncWithNewStateIDKwhattoputhere(tabId);
    });
    
    document.addEventListener('close-tab', (e) => {
      const tabId = e.detail.tabNumber;
      const tabIndex = tabs.findIndex(tab => tab.id === tabId);
      if (tabIndex !== -1) {
        tabs[tabIndex].element.remove();
        tabs.splice(tabIndex, 1);
      }
      checkState();
    });
    
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'childList' && mutation.target === document.querySelector('title')) {
          const title = document.title;
          const activeFrame = document.querySelector('iframe:not(.hidden)');
          const url = activeFrame?.contentWindow?.location.href || '';
          changeTitle(currentTabId, title, url);
        }
      });
    });
    
    observer.observe(document.querySelector('title'), { childList: true });
  });
</script>

<style>
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
  
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  
  [data-tab-id] {
    border-bottom: 2px solid transparent;
    transition: all 0.2s ease;
  }
  
  [data-tab-id]:hover, [data-tab-id].active {
    background-color: var(--color-overlay);
  }
  
  [data-tab-id].active {
    border-bottom-color: var(--color-iris);
  }
</style>
