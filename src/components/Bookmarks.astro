---
import Popup from "../Popup.astro";

// Unique IDs for the popup elements
const popupId = 'bookmarks-popup';
const triggerId = 'bookmarks-trigger';
const contentId = 'bookmarks-content';
const closeBtnId = 'bookmarks-close';
---

<Popup 
  {popupId}
  {triggerId}
  {contentId}
  {closeBtnId}
  title="Bookmarks"
  triggerAriaLabel="Toggle bookmarks"
  triggerIcon="ph:bookmark-simple"
>
  <div class="space-y-4">
    <div class="flex flex-col space-y-2">
      <form id="bookmark-form" class="flex flex-col space-y-2">
        <input type="hidden" id="bookmark-id" />
        <div>
          <label for="bookmark-title" class="text-text font-semibold text-sm">Title:</label>
          <input
            type="text"
            id="bookmark-title"
            name="title"
            required
            class="w-full bg-surface0 text-text p-2 rounded focus:outline-none focus:ring-2 focus:ring-iris text-sm"
            placeholder="e.g., My Favorite Site"
          />
        </div>
        <div>
          <label for="bookmark-url" class="text-text font-semibold text-sm">URL:</label>
          <input
            type="url"
            id="bookmark-url"
            name="url"
            required
            class="w-full bg-surface0 text-text p-2 rounded focus:outline-none focus:ring-2 focus:ring-iris text-sm"
            placeholder="e.g., https://example.com"
          />
        </div>
        <div class="flex space-x-2 pt-2">
          <button
            type="submit"
            class="bg-green text-text px-3 py-1.5 rounded hover:bg-opacity-80 transition-colors flex-grow text-sm"
          >
            Save Bookmark
          </button>
          <button
            type="button"
            id="delete-bookmark-in-popup-btn"
            class="bg-red text-text px-3 py-1.5 rounded hover:bg-opacity-80 transition-colors flex-grow hidden text-sm"
          >
            Delete Bookmark
          </button>
        </div>
      </form>
    </div>
    
    <div class="border-t border-surface1 pt-3">
      <h3 class="text-text font-semibold mb-2">Your Bookmarks</h3>
      <ul id="bookmarks-list" class="space-y-2 max-h-[40vh] overflow-y-auto pr-2">
        <!-- Bookmarks will be dynamically inserted here -->
      </ul>
    </div>
  </div>
</Popup>

<!-- Context Menu -->
<div
  id="bookmark-context-menu"
  class="z-[10000] fixed hidden bg-surface0 text-text rounded shadow-lg py-0.5 border border-surface1"
>
  <button
    data-action="edit"
    class="block w-full text-left px-3 py-1 hover:bg-surface1 text-sm"
  >
    Edit
  </button>
  <button
    data-action="delete"
    class="block w-full text-left px-3 py-1 hover:bg-surface1 text-sm text-red"
  >
    Delete
  </button>
</div>

<script>
// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  // Get DOM elements
  const popup = document.getElementById("bookmarks-popup");
  const popupContent = document.getElementById("bookmarks-content");
  const closeButton = document.getElementById("bookmarks-close");
  const bookmarksList = document.getElementById("bookmarks-list");
  const bookmarkForm = document.getElementById("bookmark-form");
  const bookmarkIdInput = document.getElementById("bookmark-id");
  const bookmarkTitleInput = document.getElementById("bookmark-title");
  const bookmarkUrlInput = document.getElementById("bookmark-url");
  const deleteBookmarkInPopupBtn = document.getElementById("delete-bookmark-in-popup-btn");
  const contextMenu = document.getElementById("bookmark-context-menu");
  
  // State
  let bookmarks = JSON.parse(localStorage.getItem("bookmarks") || "[]");
  let contextMenuIndex = -1;

  // Toggle popup visibility
  function togglePopup(show = null) {
    const isHidden = popup.classList.contains('hidden');
    const shouldShow = show !== null ? show : isHidden;
    
    if (shouldShow) {
      popup.classList.remove('hidden', 'pointer-events-none');
      popupContent.classList.remove('-translate-y-full');
      popupContent.classList.add('translate-y-0');
      // Focus the title input when showing
      setTimeout(() => bookmarkTitleInput?.focus(), 100);
    } else {
      popupContent.classList.remove('translate-y-0');
      popupContent.classList.add('-translate-y-full');
      // Small delay before hiding to allow for animation
      setTimeout(() => {
        popup.classList.add('hidden', 'pointer-events-none');
      }, 300);
    }
  }

  // Keyboard shortcut: Alt+Shift+B
  document.addEventListener('keydown', (e) => {
    if (e.altKey && e.shiftKey && e.key.toLowerCase() === 'b') {
      e.preventDefault();
      togglePopup();
    }
  });

  // Close popup when clicking outside
  popup?.addEventListener('click', (e) => {
    if (e.target === popup) {
      togglePopup(false);
    }
  });

  // Close button
  closeButton?.addEventListener('click', () => togglePopup(false));

  // Render bookmarks list
  const renderBookmarksList = () => {
    if (!bookmarksList) return;
    
    if (bookmarks.length === 0) {
      bookmarksList.innerHTML = `
        <div class="text-center py-4 text-text-muted text-sm">
          No bookmarks yet. Add one above!
        </div>
      `;
      return;
    }
    
    bookmarksList.innerHTML = bookmarks.map((bookmark, index) => `
      <li class="group flex items-center justify-between p-2 rounded hover:bg-surface1 transition-colors">
        <a 
          href="${bookmark.url}" 
          target="_blank" 
          rel="noopener noreferrer"
          class="flex-1 min-w-0 truncate text-sm text-text hover:text-iris transition-colors"
          title="${bookmark.title}\n${bookmark.url}"
        >
          <span class="font-medium">${bookmark.title}</span>
          <span class="text-text-muted text-xs block truncate">${bookmark.url}</span>
        </a>
        <button 
          class="bookmark-context-trigger p-1 rounded hover:bg-surface2 text-text-muted hover:text-text transition-colors opacity-0 group-hover:opacity-100"
          data-index="${index}"
          aria-label="Bookmark actions"
        >
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <circle cx="12" cy="12" r="1"/>
            <circle cx="12" cy="5" r="1"/>
            <circle cx="12" cy="19" r="1"/>
          </svg>
        </button>
      </li>
    `).join('');
    
    // Add event listeners to context menu triggers
    document.querySelectorAll('.bookmark-context-trigger').forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        const index = parseInt(btn.getAttribute('data-index'));
        showContextMenu(e, index);
      });
    });
  };

  // Save bookmarks to localStorage
  const saveBookmarksToLocalStorage = () => {
    localStorage.setItem("bookmarks", JSON.stringify(bookmarks));
    renderBookmarksList();
  };

  // Add or update a bookmark
  const addOrUpdateBookmark = (title, url, index = null) => {
    if (index !== null && index >= 0 && index < bookmarks.length) {
      bookmarks[index] = { title, url };
    } else {
      bookmarks.push({ title, url });
    contextMenu.style.left = `${e.clientX + 5}px`;
    contextMenu.classList.remove("hidden");
  } else {
    contextMenu.classList.add("hidden");
  }
});

document.addEventListener("click", (e) => {
  if (!contextMenu.contains(e.target) && !e.target.closest(".bookmark-item")) {
    contextMenu.classList.add("hidden");
  }
});

contextMenu.addEventListener("click", (e) => {
  const { action } = e.target.dataset;
  contextMenu.classList.add("hidden");

  if (activeBookmarkIndex !== null && bookmarks[activeBookmarkIndex]) {
    const bookmark = bookmarks[activeBookmarkIndex];
    if (action === "edit") {
      bookmarkIdInput.value = activeBookmarkIndex;
      bookmarkTitleInput.value = bookmark.title;
      bookmarkUrlInput.value = bookmark.url;
      deleteBookmarkInPopupBtn.classList.remove("hidden");
      addEditBookmarkPopup.open();
    } else if (action === "delete") {
      if (confirm(`Are you sure you want to delete "${bookmark.title}"?`)) {
        deleteBookmark(activeBookmarkIndex);
      }
    }
  }
  activeBookmarkIndex = null;
});

// --- Keyboard Shortcut for Toggling Nav ---
window.addEventListener("keydown", (e) => {
  if (e.altKey && e.shiftKey && (e.key === "b" || e.key === "B")) {
    e.preventDefault();
    mainNav.classList.toggle("hidden");
  }
});

renderBookmarksList();
 </script>
