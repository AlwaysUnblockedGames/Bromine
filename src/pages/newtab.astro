---
import "@/styles.css";
import settingsData from "@/data/newtabsettings.json";

const flatSettingsConfig = settingsData.sections.flatMap(
	(section) => section.settings,
);
---

<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta content="IE=edge" http-equiv="X-UA-Compatible" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, shrink-to-fit=no"
    />

    <link rel="icon" href="favicon.svg" sizes="any" type="image/svg+xml">
    <script is:inline defer async src="https://fundingchoicesmessages.google.com/i/pub-3510278623917680?ers=1"></script><script>(function() {function signalGooglefcPresent() {if (!window.frames['googlefcPresent']) {if (document.body) {const iframe = document.createElement('iframe'); iframe.style = 'width: 0; height: 0; border: none; z-index: -1000; left: -1000px; top: -1000px;'; iframe.style.display = 'none'; iframe.name = 'googlefcPresent'; document.body.appendChild(iframe);} else {setTimeout(signalGooglefcPresent, 0);}}}signalGooglefcPresent();})();</script>
    <script is:inline defer async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3510278623917680"
     crossorigin="anonymous"></script>     
    <script is:inline defer>
      window.addEventListener("theme-changed", () => {
        document.body.dataset.theme = localStorage.getItem("theme");
      });

      const cloak = () => {
        const cloakValue = localStorage.getItem("cloak");
        if (!cloakValue || cloakValue === 'none') return;

        const cloakk = cloakValue.split("|");
        document.title = cloakk[0];
        const icon = document.querySelector("link[rel=icon]");
        if (icon)
          icon.href = cloakk[1];
      };

      window.addEventListener("cloak-changed", cloak);

      document.addEventListener("DOMContentLoaded", () => {
        document.body.dataset.theme = localStorage.getItem("theme");
        cloak();
      });

    </script>
</head>
<body class="text-text bg-base flex">


    <main id="main" class="flex flex-col flex-grow h-screen justify-center items-center">
            <h1 class="text-4xl font-bold mb-4">New Tab</h1>

        <form id="form" class="flex justify-center w-full">

          <input
            autofocus
            spellcheck="false"
            autocomplete="off"
            id="address"
            type="text"
                    class="text-text border border-iris:border-iris rounded-lg p-2 mb-4 w-full max-w-md"
                    id="input"
                    required
                    placeholder="Search the world wide web"
                >
            </form>

      <script>
  import {
    setTransport,
    setWisp,
    setProxy,
    makeURL,
    getProxied,
  } from "@/utils/lethal.ts"
  

  let backend = localStorage.getItem("proxy-backend") || "uv" as string
  let wisp = localStorage.getItem("wisp-server") || "wss://anura.pro/" as string
  let transport = localStorage.getItem("proxy-transport") as string

  setWisp(wisp)
  setProxy(backend)

  if (transport) setTransport(transport as Transport)
  else if (navigator.userAgent.indexOf("Firefox") > 0) setTransport("libcurl")
  else setTransport("epoxy")
  let search =
    localStorage.getItem("search-engine") ||
    "https://search.brave.com/search?q=%s" as string

            const form = document.getElementById("form") as HTMLFormElement
  const input = document.getElementById("address") as HTMLInputElement

  form?.addEventListener("submit", async (e) => {
    e.preventDefault()

    const proxiedUrl = await getProxied(makeURL(input?.value, search))

    if (localStorage.getItem("stealth-mode")) 
      location.replace(proxiedUrl)
     else 
      location.href = proxiedUrl
    

  })


  window.addEventListener("search-engine-changed", () => {
    search = localStorage.getItem("search-engine") as string
  })

  window.addEventListener("proxy-backend-changed", () => {
    backend = localStorage.getItem("proxy-backend") as string
    setProxy(localStorage.getItem("proxy-backend") as string)
  })

  window.addEventListener("wisp-server-changed", () => {
    wisp = localStorage.getItem("wisp-server") as string
    setWisp(localStorage.getItem("wisp-server") as string)
  })

  window.addEventListener("proxy-transport-changed", () => {
    transport = localStorage.getItem("proxy-transport") as Transport
    setTransport(localStorage.getItem("proxy-transport") as Transport)
  })
        </script>
    </main>
  
<aside class="fixed top-4 right-4 border border-overlay rounded-lg p-4 space-y-4 mica max-h-[50vh] overflow-y-auto">
  {
    settingsData.sections.map((section) => (
      <section class="space-y-2">
        <h2 class="text-lg font-medium text-text">{section.title}</h2>
        {
          section.settings.map((setting) => (
            <div class="flex items-center justify-between gap-4">
              <label class="text-text flex-1" for={setting.id}>
                {setting.label}
              </label>

              {setting.type === "toggle" ? (
                <label class="relative inline-flex items-center cursor-pointer">
                  <input
                    type="checkbox"
                    id={setting.id}
                    class="sr-only peer"
                  />
                  <div class="w-11 h-6 bg-overlay rounded-full peer peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-iris peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-iris" />
                </label>
              ) : (
              <input
                  type={setting.type}
                  id={setting.id}
                  class="bg-overlay text-text rounded-md px-2 py-1 w-48 focus:outline-none focus:ring-2 focus:ring-iris"
                  placeholder={setting.placeholder || ""}
                />
              )}
            </div>
          ))
        }
      </section>
    ))
  }
</aside>

  </body>
</html>

<script define:vars={{ settingsConfig: flatSettingsConfig }} defer is:inline>
  const load = () => {
    settingsConfig.forEach((setting) => {
      const element = document.getElementById(setting.id);
      if (!element) return;

      const storedValue = localStorage.getItem(setting.id);
      const valueToApply = storedValue ?? setting.defaultValue;

      if (setting.type === "toggle") {
        element.checked = valueToApply === "true";
      } else {
        element.value = valueToApply;
      }
    });
  };

const save = (event) => {
  const element = event.target;
  if (!element || !element.id) return;

  const setting = settingsConfig.find((s) => s.id === element.id);
  if (!setting) return;

  let valueToStore;

  switch (setting.type) {
    case "toggle":
      valueToStore = element.checked.toString();
      break;

    case "number":
      valueToStore = Number(element.value).toString();
      break;

    case "text":
    case "url":
    default:
      valueToStore = element.value?.toString().trim();
      break;
  }

  if (valueToStore !== undefined) {
    localStorage.setItem(setting.id, valueToStore);
  }
  };

  const init = () => {
    load();

    settingsConfig.forEach((setting) => {
      const element = document.getElementById(setting.id);
      if (element) {
        element.addEventListener("change", save);
      }
    });
  };

  init();
</script>

<script is:inline defer>
  const applyWallpaper = () => {
    const enabled = localStorage.getItem("wallpaper-enabled") === "true";
    const url = localStorage.getItem("wallpaper-url");

    const body = document.querySelector("body");

    if (enabled && url) {
      body.style.backgroundImage = `url('${url}')`;
      body.style.backgroundSize = "cover";
      body.style.backgroundPosition = "center";
      body.style.backgroundRepeat = "no-repeat";
    } else {
      body.style.backgroundImage = "none";
    }
  };

  window.addEventListener("DOMContentLoaded", applyWallpaper);

  window.addEventListener("storage", () => {
    applyWallpaper();
  });

  ["wallpaper-enabled", "wallpaper-url"].forEach((id) => {
    const el = document.getElementById(id);
    if (el) {
      el.addEventListener("change", applyWallpaper);
    }
  });
</script>
