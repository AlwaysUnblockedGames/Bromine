---
import "@/styles.css"
// import settingsData from "@/data/newtabsettings.json"
//
// const flatSettingsConfig = settingsData.sections.flatMap(
//   (section) => section.settings,
// )
---

<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta content="IE=edge" http-equiv="X-UA-Compatible" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, shrink-to-fit=no"
    />

    <script defer src='https://static.cloudflareinsights.com/beacon.min.js' data-cf-beacon='{"token": "e61e964fbec94d7a930bc79a7775d076"}'></script>

<script type="text/partytown" async defer src="https://scripts.simpleanalyticscdn.com/latest.js"></script>
    <link rel="icon" href="favicon.svg" sizes="any" type="image/svg+xml">
<script type="text/partytown" is:inline defer>
      window.addEventListener("theme-changed", () => {
        document.body.dataset.theme = localStorage.getItem("theme");
      });

      const cloak = () => {
        const cloakValue = localStorage.getItem("cloak");
        if (!cloakValue || cloakValue === 'none') return;

        const cloakk = cloakValue.split("|");
        document.title = cloakk[0];
        const icon = document.querySelector("link[rel=icon]");
        if (icon)
          icon.href = cloakk[1];
      };

      window.addEventListener("cloak-changed", cloak);

      document.addEventListener("DOMContentLoaded", () => {
        document.body.dataset.theme = localStorage.getItem("theme");
        cloak();
      });

    </script>
</head>
<body class="text-text bg-base flex">


    <main id="main" class="flex flex-col flex-grow h-screen justify-center items-center">
            <h1 class="text-4xl font-bold mb-4">New Tab</h1>

        <form id="form" class="flex justify-center w-full">

          <input
            autofocus
            spellcheck="false"
            autocomplete="off"
            id="address"
            type="text"
                    class="text-text border border-iris:border-iris rounded-lg p-2 mb-4 w-full max-w-md"
                    id="input"
                    required
                    placeholder="Search the world wide web"
                >
            </form>

      <script>
  import {
    setTransport,
    setWisp,
    setProxy,
    makeURL,
    getProxied,
  } from "@/utils/lethal.ts"
  

 let backend = localStorage.getItem("proxy-backend") || "uv"
  let wisp = localStorage.getItem("wisp-server") || "wss://anura.pro/"
  let transport = localStorage.getItem("proxy-transport")

  setWisp(wisp)
  setProxy(backend)

  if (transport) setTransport(transport)
  else if (navigator.userAgent.indexOf("Firefox") > 0) setTransport("libcurl")
  else setTransport("epoxy")
  let search =
    localStorage.getItem("search-engine") ||
    "https://search.brave.com/search?q=%s"

            const form = document.getElementById("form")
            const input = document.getElementById("address")

  form.addEventListener("submit", async (e) => {
    e.preventDefault()

    const proxiedUrl = await getProxied(makeURL(input.value, search))

    if (localStorage.getItem("stealth-mode")) 
      location.replace(proxiedUrl)
     else 
      location.href = proxiedUrl
    

  })


  window.addEventListener("search-engine-changed", () => {
    search = localStorage.getItem("search-engine")
  })

  window.addEventListener("proxy-backend-changed", () => {
    backend = localStorage.getItem("proxy-backend")
    setProxy(localStorage.getItem("proxy-backend"))
  })

  window.addEventListener("wisp-server-changed", () => {
    wisp = localStorage.getItem("wisp-server")
    setWisp(localStorage.getItem("wisp-server"))
  })

  window.addEventListener("proxy-transport-changed", () => {
    transport = localStorage.getItem("proxy-transport")
    setTransport(localStorage.getItem("proxy-transport"))
  })
        </script>
    </main>

    <!-- <aside class="fixed top-4 right-4 bg-base border border-overlay rounded-lg p-4 space-y-4"> -->
    <!--   { -->
    <!--     settingsData.sections.map((section) => ( -->
    <!--       <section class="space-y-2"> -->
    <!--         <h2 class="text-lg font-medium text-text">{section.title}</h2> -->
    <!--         {section.settings.map((setting) => ( -->
    <!--           <div class="flex items-center justify-between gap-4"> -->
    <!--             <label class="text-text" for={setting.id}> -->
    <!--               {setting.label} -->
    <!--             </label> -->
    <!--             <label class="relative inline-flex items-center cursor-pointer"> -->
    <!--               <input -->
    <!--                 type="checkbox" -->
    <!--                 id={setting.id} -->
    <!--                 class="sr-only peer" -->
    <!--               /> -->
    <!--               <div class="w-11 h-6 bg-overlay rounded-full peer peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-iris peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-iris" /> -->
    <!--             </label> -->
    <!--           </div> -->
    <!--         ))} -->
    <!--       </section> -->
    <!--     )) -->
    <!--   } -->
    <!-- </aside> -->
</body>
</html>
<!---->
<!-- <script define:vars={{ settingsConfig: flatSettingsConfig }} defer is:inline> -->
<!--   const load = () => { -->
<!--     settingsConfig.forEach((setting) => { -->
<!--       const element = document.getElementById(setting.id); -->
<!--       if (!element) return; -->
<!---->
<!--       const storedValue = localStorage.getItem(setting.id); -->
<!--       const valueToApply = storedValue ?? setting.defaultValue; -->
<!---->
<!--       if (setting.type === "toggle") { -->
<!--         element.checked = valueToApply === "true"; -->
<!--       } else { -->
<!--         element.value = valueToApply; -->
<!--       } -->
<!--     }); -->
<!--   }; -->
<!---->
<!--   const save = (event) => { -->
<!--     const { target: element } = event; -->
<!--     const setting = settingsConfig.find((s) => s.id === element.id); -->
<!--     if (!setting) return; -->
<!---->
<!--     const valueToStore = setting.type === "toggle" ? element.checked : element.value; -->
<!--     localStorage.setItem(setting.id, valueToStore.toString()); -->
<!--   }; -->
<!---->
<!--   const init = () => { -->
<!--     load(); -->
<!---->
<!--     settingsConfig.forEach((setting) => { -->
<!--       const element = document.getElementById(setting.id); -->
<!--       if (element) { -->
<!--         element.addEventListener("change", save); -->
<!--       } -->
<!--     }); -->
<!--   }; -->
<!---->
<!--   init(); -->
<!-- </script> -->

