name: CI
on:
  workflow_dispatch:
  check_run:
    types: [completed]
    
permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  BUILD_PATH: "."
    
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: Install dependencies with Bun
        run: bun install
        working-directory: ${{ env.BUILD_PATH }}

      - name: Build with Astro
        run: |
          bunx astro build \
            --site "${{ steps.pages.outputs.origin }}" \
            --base "${{ steps.pages.outputs.base_path }}"
        working-directory: ${{ env.BUILD_PATH }}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.BUILD_PATH }}/dist
      
  dockerci:
    needs: [build]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set image tag
      run: echo "IMAGE_TAG=$(date +%s)" >> $GITHUB_ENV

    - name: Build Docker image
      run: docker build . --file Dockerfile --tag ghcr.io/coding4hours/bromine:$IMAGE_TAG
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: "coding4Hours"
        password: ${{ secrets.TOKEN }}
    
    - name: Run Docker container
      run: docker push ghcr.io/coding4hours/bromine:$IMAGE_TAG
      
  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  lighthouse:
    needs: [ build, deploy ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Audit URLs using Lighthouse
        id: LHCIAction
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            https://bromine-labs.github.io/bromine/
            https://bromine.pages.dev/
            https://bromine.on-to.space
          runs: 10
          uploadArtifacts: true # save results as an action artifacts
          temporaryPublicStorage: true # upload lighthouse report to the temporary storage
        
      - name: Send Lighthouse Links to Discord via Embed
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.ACTIONS_WEBHOOK_URL }}
          RAW_LINKS_OUTPUT: ${{ steps.LHCIAction.outputs.links }}
        run: |
          # 1. Format a description showing each site and its corresponding report link
          FORMATTED_DESCRIPTION=$(echo "$RAW_LINKS_OUTPUT" | jq -r '
            [
              to_entries | . as $items | range(length) as $i |
              "\($i + 1). **\($items[$i].key)**\n   ↳ [View Lighthouse Report](\($items[$i].value))"
            ] | join("\n\n")
          ')

          # 2. Get the current timestamp in ISO 8601 format
          TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%S.000Z)

          # 3. Safely build the JSON payload with the new description
          JSON_PAYLOAD=$(jq -n \
                            --arg username "Lighthouse Bot" \
                            --arg description "$FORMATTED_DESCRIPTION" \
                            --arg timestamp "$TIMESTAMP" \
                            '{
                              "username": $username,
                              "avatar_url": "https://raw.githubusercontent.com/GoogleChrome/lighthouse/main/assets/lighthouse-logo.png",
                              "embeds": [
                                {
                                  "title": "✅ Lighthouse Scan Results",
                                  "description": $description,
                                  "color": 3447003,
                                  "footer": {
                                    "text": "Report generated by Lighthouse CI"
                                  },
                                  "timestamp": $timestamp
                                }
                              ]
                            }')

          # 4. Send the embed payload to Discord
          curl -X POST -H "Content-Type: application/json" \
               -d "$JSON_PAYLOAD" \
               "${DISCORD_WEBHOOK_URL}"
