name: CI

on:
  workflow_dispatch:
  push:
    branches: [main]

permissions:
  contents: read
  pages: write
  id-token: write

env:
  BUILD_PATH: "."

jobs:
  lint:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install deps
        run: bun install
        working-directory: ${{ env.BUILD_PATH }}

      - name: Check
        run: bun run check
        working-directory: ${{ env.BUILD_PATH }}
        
      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

  dockerci:
    name: Docker CI
    needs: [lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set image tag
        run: echo "IMAGE_TAG=$(date +%s)" >> $GITHUB_ENV

      - name: Build Docker image
        run: docker build . --file Dockerfile --tag ghcr.io/coding4hours/bromine:$IMAGE_TAG

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: "coding4Hours"
          password: ${{ secrets.TOKEN }}

      - name: Push Docker container
        run: docker push ghcr.io/coding4hours/bromine:$IMAGE_TAG

  deploy:
    name: Deploy to GitHub Pages
    needs: [lint]
    runs-on: ubuntu-latest
    concurrency:
      group: "pages"
      cancel-in-progress: false
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v4

  release:
    name: Release on Tag
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    needs: [deploy, dockerci]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install
        working-directory: ${{ env.BUILD_PATH }}

      - name: Build with Astro
        run: bun run build
        working-directory: ${{ env.BUILD_PATH }}

      - name: Archive Build Output
        run: |
          cd ${{ env.BUILD_PATH }}/dist
          zip -r ../../build.zip ./
          cd -

      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            build.zip
